syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

package ims.market;

/*
Integrated for communication with orders. Has an apply and assign function
*/
service OrderNegotiate {
    /*
    Requests here are applying for an order. check stock match between abilities and requirements
    than decide to accept the order or reject it. The orders decides to wich agent it's assigned,
    so calls to this function dont need to be stored in the agent.
    */
    rpc apply(stream StepInfo) returns (stream OrderOffer) {}

    /*
    requests here are assiging the order. validate it first, than add it directly to a queue
    */
    rpc assign(stream StepInfo) returns (stream OrderCost) {}

    /*
    Cancels the order
    */
    rpc cancel(CancelRequest) returns (google.protobuf.Empty) {}

    /*
    Start step
    */
    rpc start(StepInfo) returns (google.protobuf.Empty) {}
}

/*
*/
service OrderCallback {
    /*
    */
    rpc cancel(CancelRequest) returns (google.protobuf.Empty) {}

    /*
    */
    rpc finish_step(StepInfo) returns (google.protobuf.Empty) {}

    /*
    */
    rpc next_step(google.protobuf.Empty) returns (google.protobuf.Empty) {}

    /*
    */
    rpc reassign(CancelRequest) returns (google.protobuf.Empty) {}

    /*
    */
    rpc start_step(StepInfo) returns (google.protobuf.Empty) {}

}

message StepInfo {
    string order = 1;
    int32 number = 2;
    float time_start = 3;
    float time_finish = 4;
    repeated string abilities = 5;
    google.protobuf.Any data = 6;
}

message OrderOffer {
    string agent = 1;
    StepInfo step = 2;
    OrderCost cost = 3;
}

message OrderCost {
    float production_cost = 1;
    float production_time = 2;
    float queue_cost = 3;
    float queue_time = 4;
    float transport_cost = 5;
    float transport_time = 6;
}

message CancelRequest {
    string order = 1;
}
